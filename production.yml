version: "2"
services:

  nginx:
    restart: always
    image: jwilder/nginx-proxy
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "nginx-conf:/etc/nginx/conf.d"
      - "nginx-vhost:/etc/nginx/vhost.d"
      - "letsencrypt-challenges:/usr/share/nginx/html"
      - "letsencrypt-certs:/etc/nginx/certs:ro"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
    environment:
      - HTTPS_METHOD=nohttp

  nginx-gen:
    restart: always
    image: jwilder/docker-gen
    container_name: nginx-gen
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "letsencrypt-templates:/etc/docker-gen/templates:ro"
    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes_from:
      - nginx

  letsencrypt-nginx-proxy-companion:
    restart: always
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt-nginx-proxy-companion
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt-certs:/etc/nginx/certs:rw"
    environment:
      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen
    volumes_from:
      - nginx

  postgres:
    restart: always
    image: postgres:9.6.2
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - "5432"
    environment:
      - VIRTUAL_NETWORK=nginx-proxy
      - VIRTUAL_PORT=5432

  web:
    restart: always
    build: ./web
    container_name: web
    expose:
      - "8000"
    volumes:
      - "nginx-conf:/etc/nginx/conf.d"
    env_file: .env
    command: /usr/local/bin/gunicorn tlgc.wsgi:application -w 2 -b :8000

volumes:
  nginx-conf:
  nginx-vhost:
  letsencrypt-challenges:
  letsencrypt-templates:
  letsencrypt-certs:
  postgres-data:
